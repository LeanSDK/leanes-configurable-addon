{"version":3,"file":"index.js","sources":["../../../../tmp/broccoli-183SocayR1DzzE/cache-1-broccoli_rollup_leanes_configurable_addon/build/319b7434ef92dd33355c918932179b","../src/proxies/Configuration.js","../../../../tmp/broccoli-183SocayR1DzzE/cache-1-broccoli_rollup_leanes_configurable_addon/build/c4278645668e87ec3b1fdf609ba49e","../src/mixins/ConfigurableMixin.js","../../../../tmp/broccoli-183SocayR1DzzE/cache-1-broccoli_rollup_leanes_configurable_addon/build/e6cfa77c6299047e3245c9acdcab13","../src/mixins/MemoryConfigurationMixin.js","../../../../tmp/broccoli-183SocayR1DzzE/cache-1-broccoli_rollup_leanes_configurable_addon/build/1742f823a8a58c06709cd21863bc09","../src/patches/FacadePatch.js","../src/index.js"],"sourcesContent":["export default '/proxies/Configuration.js'","// This file is part of leanes-configurable-addon.\n//\n// leanes-configurable-addon is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// leanes-configurable-addon is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with leanes-configurable-addon.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { ConfigurationInterface } from '../interfaces/ConfigurationInterface';\n\nconst hasProp = {}.hasOwnProperty;\n\nexport default (Module) => {\n  const {\n    PRODUCTION, DEVELOPMENT, ENV,\n    Proxy,\n    assert,\n    initialize, partOf, meta, property, method, nameBy,\n    Utils: { _, assign }\n  } = Module.NS;\n\n  @initialize\n  @partOf(Module)\n  class Configuration extends Proxy implements ConfigurationInterface {\n    @nameBy static  __filename = __filename;\n    @meta static object = {};\n\n    @property _configI = 'ConfigurationInterface';\n\n    @property get root(): string {\n      return this.getData() || '.';\n    }\n\n    @property get environment(): string {\n      let ref;\n      if (ENV === 'production') {\n        return PRODUCTION;\n      } else {\n        return DEVELOPMENT;\n      }\n    }\n\n    @property _name: ?string = null;\n\n    @property _description: ?string = null;\n\n    @property _license: ?string = null;\n\n    @property _version: ?string = null;\n\n    @property _keywords: ?string[] = null;\n\n    @property get name(): ?string {\n      return this._name;\n    }\n\n    @property get description(): ?string {\n      return this._description;\n    }\n\n    @property get license(): ?string {\n      return this._license;\n    }\n\n    @property get version(): ?string {\n      return this._version;\n    }\n\n    @property get keywords(): ?string[] {\n      return this._keywords;\n    }\n\n    @property get manifestPath(): string {\n      return 'manifest.json';\n    }\n\n    @property get configPath(): string {\n      return `configs/${this.environment}`;\n    }\n\n    @method defineConfigProperties() {\n      const manifestPath = `${this.root}/${this.manifestPath}`;\n      const manifest = this.ApplicationModule.require(manifestPath);\n      this._name = manifest.name;\n      this._description = manifest.description;\n      this._license = manifest.license;\n      this._version = manifest.version;\n      this._keywords = manifest.keywords;\n      const configFromManifest = manifest.configuration;\n      const filePath = `${this.root}/${this.configPath}`;\n      const configFromFile = this.ApplicationModule.require(filePath);\n      const configs = assign({}, configFromManifest, configFromFile);\n      for (const key in configs) {\n        if (!hasProp.call(configs, key)) continue;\n        const value = configs[key];\n        ((attr, config) => {\n          assert(config.description != null, 'Description in config definition is required');\n          assert(!config.required || (config.default != null), `Attribute '${attr}' is required in config`);\n          assert(config.type != null, 'Type in config definition is required');\n          switch (config.type) {\n            case 'string':\n              assert(_.isString(config.default), `Default for '${attr}' must be string`);\n              break;\n            case 'number':\n              assert(_.isNumber(config.default), `Default for '${attr}' must be number`);\n              break;\n            case 'boolean':\n              assert(_.isBoolean(config.default), `Default for '${attr}' must be boolean`);\n              break;\n            case 'integer':\n              assert(_.isInteger(config.default), `Default for '${attr}' must be integer`);\n              break;\n            case 'json':\n              assert(_.isString(config.default), `Default for '${attr}' must be JSON string`);\n              try {\n                JSON.parse(config.default);\n              } catch (error) {\n                assert.fail(`Default for '${attr}' is not valid JSON`);\n              }\n              break;\n            case 'password':\n              assert(_.isString(config.default), `Default for '${attr}' must be string`)\n          }\n          Reflect.defineProperty(this, attr, {\n            enumerable: true,\n            configurable: true,\n            writable: false,\n            value: config.type === 'json' ? JSON.parse(config.default) : config.default\n          });\n        })(key, value);\n      }\n    }\n\n    @method onRegister(...args) {\n      super.onRegister(...args);\n      this.defineConfigProperties();\n    }\n  }\n}\n","export default '/mixins/ConfigurableMixin.js'","// This file is part of leanes-configurable-addon.\n//\n// leanes-configurable-addon is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// leanes-configurable-addon is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with leanes-configurable-addon.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { ConfigurationInterface } from '../interfaces/ConfigurationInterface';\nimport type { ConfigurableInterface } from '../interfaces/ConfigurableInterface';\n\nexport default (Module) => {\n  const {\n    CONFIGURATION,\n    CoreObject,\n    initializeMixin, meta, property, inject,\n  } = Module.NS;\n\n  Module.defineMixin(__filename, (BaseClass: Class<CoreObject>) => {\n    @initializeMixin\n    class Mixin extends BaseClass implements ConfigurableInterface {\n      @meta static object = {};\n\n      @property _configurableI = 'ConfigurableInterface'\n\n      @inject(`Factory<${CONFIGURATION}>`)\n      @property _configurationFactory: <T = ConfigurationInterface>() => {'_configI': $PropertyType<T, '_configI'>};\n\n      @property get configs <T = ConfigurationInterface>(): {'_configI': $PropertyType<T, '_configI'>} {\n        return this._configurationFactory();\n      }\n    }\n    return Mixin;\n  });\n}\n","export default '/mixins/MemoryConfigurationMixin.js'","// This file is part of leanes-configurable-addon.\n//\n// leanes-configurable-addon is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// leanes-configurable-addon is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with leanes-configurable-addon.  If not, see <https://www.gnu.org/licenses/>.\n\nconst hasProp = {}.hasOwnProperty;\n\nexport default (Module) => {\n  const {\n    Configuration,\n    assert,\n    initializeMixin, meta, property, method,\n    Utils: { _, assign }\n  } = Module.NS;\n\n  Module.defineMixin(__filename, (BaseClass: Class<Configuration>) => {\n    @initializeMixin\n    class Mixin extends BaseClass {\n      @meta static object = {};\n\n      @property get root(): string {\n        return this.Module.prototype.ROOT || '.';\n      }\n\n      @method defineConfigProperties() {\n        const manifestPath = `${this.root}/${this.manifestPath}`;\n        const manifest = this.ApplicationModule.require(manifestPath);\n        this._name = manifest.name;\n        this._description = manifest.description;\n        this._license = manifest.license;\n        this._version = manifest.version;\n        this._keywords = manifest.keywords;\n        const configFromManifest = manifest.configuration;\n        const configs = assign({}, configFromManifest, this.getData());\n        for (const key in configs) {\n          if (!hasProp.call(configs, key)) continue;\n          const value = configs[key];\n          ((attr, config) => {\n            assert(config.description != null, 'Description in config definition is required');\n            assert(!config.required || (config.default != null), `Attribute '${attr}' is required in config`);\n            assert(config.type != null, 'Type in config definition is required');\n            switch (config.type) {\n              case 'string':\n                assert(_.isString(config.default), `Default for '${attr}' must be string`);\n                break;\n              case 'number':\n                assert(_.isNumber(config.default), `Default for '${attr}' must be number`);\n                break;\n              case 'boolean':\n                assert(_.isBoolean(config.default), `Default for '${attr}' must be boolean`);\n                break;\n              case 'integer':\n                assert(_.isInteger(config.default), `Default for '${attr}' must be integer`);\n                break;\n              case 'json':\n                assert(_.isString(config.default), `Default for '${attr}' must be JSON string`);\n                try {\n                  JSON.parse(config.default);\n                } catch (error) {\n                  assert.fail(`Default for '${attr}' is not valid JSON`);\n                }\n                break;\n              case 'password':\n                assert(_.isString(config.default), `Default for '${attr}' must be string`)\n            }\n            Reflect.defineProperty(this, attr, {\n              enumerable: true,\n              configurable: true,\n              writable: false,\n              value: config.default\n            });\n          })(key, value);\n        }\n      }\n    }\n    return Mixin;\n  });\n}\n","export default '/patches/FacadePatch.js'","// This file is part of leanes-configurable-addon.\n//\n// leanes-configurable-addon is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// leanes-configurable-addon is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with leanes-configurable-addon.  If not, see <https://www.gnu.org/licenses/>.\n\nexport default (Module) => {\n  const {\n    CONFIGURATION,\n    initializePatch, meta, method,\n    Utils: { _ }\n  } = Module.NS;\n\n  Module.definePatch(__filename, (BaseClass) => {\n    @initializePatch\n    class Patch extends BaseClass {\n      @meta static object = {};\n\n      @method initializeFacade(): void {\n        super.initializeFacade(... arguments)\n        this.addProxy(CONFIGURATION, 'Configuration', this.Module.NS.ROOT)\n      }\n    }\n    return Patch;\n  });\n}\n","// This file is part of leanes-configurable-addon.\n//\n// leanes-configurable-addon is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// leanes-configurable-addon is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with leanes-configurable-addon.  If not, see <https://www.gnu.org/licenses/>.\n\nexport type { ConfigurationInterface } from './interfaces/ConfigurationInterface';\nexport type { ConfigurableInterface } from './interfaces/ConfigurableInterface';\n\nimport ConfigurationTF from './proxies/Configuration';\n\nimport ConfigurableMixinTF from './mixins/ConfigurableMixin';\nimport MemoryConfigurationMixinTF from './mixins/MemoryConfigurationMixin';\n\nimport FacadePatchTF from './patches/FacadePatch';\n\nexport default (Module) => {\n  const {\n    Module: BaseModule,\n    initializeMixin, meta, constant, method, patch\n  } = Module.NS;\n\n  return ['ConfigurableAddon', (BaseClass: Class<BaseModule>) => {\n    @initializeMixin\n    class Mixin extends BaseClass {\n      @meta static object = {};\n\n      @constant CONFIGURATION =  'ConfigurationProxy';\n\n      @method static including() {\n        patch(this.NS.FacadePatch)(this.NS.Facade);\n      }\n    }\n\n    ConfigurationTF(Mixin);\n\n    ConfigurableMixinTF(Mixin);\n    MemoryConfigurationMixinTF(Mixin);\n\n    FacadePatchTF(Mixin);\n\n    return Mixin;\n  }]\n}\n"],"names":["DEVELOPMENT","ENV","Proxy","assert","initialize","partOf","meta","property","method","nameBy","_","assign","Configuration","manifestPath","manifest","require","_license","_version","_keywords","configFromManifest","filePath","configFromFile","configs","required","config","type","JSON","Reflect","enumerable","configurable","writable","value","args","CoreObject","initializeMixin","inject","Module","Mixin","CONFIGURATION","_configurationFactory","Utils","initializePatch","Patch","addProxy","NS","BaseModule","constant","patch","BaseClass","FacadePatch","Facade","object","ConfigurationTF","ConfigurableMixinTF","MemoryConfigurationMixinTF","FacadePatchTF"],"mappings":"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"}